#if !defined (MY_LIGHTING_INCLUDED)
#define MY_LIGHTING_INCLUDED

	#include "UnityPBSLighting.cginc"
	#include "AutoLight.cginc"


			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
				float3 normal: NORMAL;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float3 normal: TEXCOORD1;
				float4 vertex : SV_POSITION;
				float3 worldPos:TEXCOORD2;

				#if defined(VERTEXLIGHT_ON)
					float3 vertexLightColor : TEXCOORD3;
				#endif
			};


			void ComputeVertexLightColor(appdata a,inout v2f i){
				#if defined (VERTEXLIGHT_ON)
					i.vertexLightColor = Shade4PointLights(
					unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
					unity_LightColor[0].rgb, unity_LightColor[1].rgb,
					unity_LightColor[2].rgb, unity_LightColor[3].rgb,
					unity_4LightAtten0, i.worldPos, i.normal
				);
				#endif
			}

			sampler2D _MainTex;
			float4 _MainTex_ST;
			float4 _Tint;
			float _Smoothness;
			float _Metallic;

			v2f vert (appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.worldPos=mul(unity_ObjectToWorld,v.vertex);

				o.uv = TRANSFORM_TEX(v.uv, _MainTex);
				o.normal=mul(unity_ObjectToWorld,float4 (v.normal,0));

				ComputeVertexLightColor(v,o);
				return o;
			}


			UnityLight CreateLight (v2f i){

				UnityLight light;
				#if defined(POINT) || defined(SPOT)
					light.dir = normalize(_WorldSpaceLightPos0.xyz - i.worldPos);
				#else
					light.dir = _WorldSpaceLightPos0.xyz;
				#endif

				float3 lightVec = _WorldSpaceLightPos0.xyz - i.worldPos;

				UNITY_LIGHT_ATTENUATION(attenuation,0,i.worldPos);
				light.color = _LightColor0.rgb * attenuation;
				light.ndotl = DotClamped(i.normal, light.dir);
				return light;
			}

			UnityIndirect CreateIndirectLight (v2f i) {
				UnityIndirect indirectLight;
				indirectLight.diffuse = 0;
				indirectLight.specular = 0;

				#if defined(VERTEXLIGHT_ON)
					indirectLight.diffuse = i.vertexLightColor;
				#endif

				#if defined(FORWARD_BASE_PASS)
					indirectLight.diffuse += max(0, ShadeSH9(float4(i.normal, 1)));
					indirectLight.specular = float3(1, 0, 0);
				#endif
				return indirectLight;
		}


			float4 frag (v2f i) : SV_Target
			{
				i.normal = normalize(i.normal);

				float3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);

				float3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;

				float3 specularTint;
				float oneMinusReflectivity;
				albedo = DiffuseAndSpecularFromMetallic(
					albedo, _Metallic, specularTint, oneMinusReflectivity
				);


				float3 shColor = ShadeSH9(float4(i.normal, 1));
				return float4(shColor, 1);

				return UNITY_BRDF_PBS(
					albedo, specularTint,
					oneMinusReflectivity, _Smoothness,
					i.normal, viewDir,
					CreateLight(i),CreateIndirectLight(i)
				);
			}
#endif
